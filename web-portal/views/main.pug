//-
    /***************************************************************************
     *
     *   main.pug:   "main" page for online.interlisp.org web portal.
     *               This is where the user starts up interlisp, etc.,
     *
     *   2021-11-22 Frank Halasz
     *
     *
     *   Copyright: 2021-2022 by Interlisp.org
     *
     *
     **************************************************************************/
 
extends layout

block variables

block headeradds

    script.
        var localStore;
    
        window.addEventListener('resize', (event) => {
           fillWindowOnClick(); 
        });
    
        window.addEventListener('load', (event) => {
            localStore = window.localStorage;
            const urlParams = new URLSearchParams(window.location.search);
            const rr = urlParams.get('rr') || false;
            const fromvnc = urlParams.get('fromvnc') || false;
            
            if (targetSystem == "Notecards") {
                document.getElementById("fill-window-cb").checked = true;
                document.getElementById("dev-div").style.display = "none";
                document.getElementById("custom-label").style.display = "none";
                if(#{isGuest}) {
                    document.getElementById("run-options-div").style.display = "none";
                    document.getElementById("do_not_checkbox_div").style.display = "none";

                } else {
                    document.getElementById("resume-label").style.display = "block";
                    document.getElementById("do_not_checkbox_div").style.display = "inline-block";
                }
                document.getElementById("run_notecards-label-div").style.display = "none";
                document.getElementById("run_notecards").checked = true;
                document.getElementById("custom").checked = false;
                document.getElementById("sftp-checkbox").checked = false;
            } else if(#{isGuest}) {
                document.getElementById("fill-window-cb").checked = true;
                document.getElementById("dev-div").style.display = "none";
                document.getElementById("do_not_checkbox_div").style.display = "none";
                document.getElementById("custom-label").style.display = "none";
                document.getElementById("resume-label").style.display = "none";
                document.getElementById("run_notecards-label-div").style.display = "block";
                document.getElementById("run_notecards-label").style.textAlign = "center";
                document.getElementById("run_notecards").checked = false;
                document.getElementById("sftp-checkbox").checked = false;
            } else {
                document.getElementById("resume").checked = (localStore.getItem("resume") == "true");
                document.getElementById("custom").checked = (localStore.getItem("custom") == "true");
                document.getElementById("sftp-checkbox").checked = (localStore.getItem("sftp") == "true");
                document.getElementById("run_notecards").checked = (localStore.getItem("run_notecards") == "true");
                document.getElementById("fill-window-cb").checked = ((localStore.getItem("fill-window") || 'true') == 'true')
                document.getElementById("dev-div").style.display = "inline-block";
                document.getElementById("do_not_checkbox_div").style.display = "inline-block";
                document.getElementById("custom-label").style.display = "block";
                document.getElementById("resume-label").style.display = "block";
                document.getElementById("run_notecards-label-div").style.display = "block";
                document.getElementById("run_notecards-label").style.textAlign = "left";
                customOnClick();
                resumeOnClick();
            }
            fillWindowOnClick();
            document.getElementById("dev-options-checkbox").checked = (localStore.getItem("show_dev_options") == "true");
            showDevOptionsOnClick();
            if(! fromvnc) {
                if("#{isVerified}" != "true") {
                    const dlg = document.getElementById(rr ? "verification-dialog2" : "verification-dialog1");
                    dlg.showModal();
                }
                if("#{nodisclaimer}" != "true") {
                    const dlg = document.getElementById("disclaimer-dialog");
                    const cb = document.getElementById("do_not_checkbox");
                    cb.checked = false;
                    dlg.showModal();
                }
            }
        });

    script.
        function startSession (interlispOrXterm) {
            const screenWidth = document.getElementById("screen-width").value;
            const screenHeight = document.getElementById("screen-height").value;
            const fillWindow = document.getElementById("fill-window-cb").checked;
            const resume = document.getElementById("resume").checked ? "true" : "false";
            const custom = document.getElementById("custom").checked ? "true" : "false";
            const runNotecards = document.getElementById("run_notecards").checked ? "true": "false";
            const startSftp = document.getElementById("sftp-checkbox").checked ? "true": "false";
            //const devmode = document.getElementById("devmode").checked ? "true" : "false";
            if(! #{isGuest}) {
                localStore.setItem("fill-window", fillWindow ? 'true' : 'false');
                if(! fillWindow) {
                    localStore.setItem("screen_width", screenWidth);
                    localStore.setItem("screen_height", screenHeight);
                }
                localStore.setItem("run_notecards", runNotecards);
                localStore.setItem("resume", resume);
                localStore.setItem("custom", custom);
            }
            if((! #{isGuest}) && (targetSystem != "Notecards")) {
                localStore.setItem("sftp", startSftp);
            }


            //  ToDo:  clean this up; use async await; have only single call to window.location.assign
            fetch(`/medley/checksession`)
                .then(  response => {
                            //console.log(response);
                            if (!response.ok) {
                                response.text().then(txt => { showAlert(`Start Interlisp failed! status: ${response.status}  error: ${txt}`); });
                                return Promise.reject("start interlisp fail");
                            } else {
                                return response.json();
                            }
                        }
                )
                .then(  data => {
                            const isRunning = data.isRunning;
                            const sessionType = data.target;
                            if(isRunning) {
                                new Promise((resolve, reject) => {
                                    const dlg = document.getElementById("reconnect-dialog");
                                    const typeEl = document.getElementById("rd-type-span");
                                    typeEl.html = sessionType;
                                    dlg.resolve = resolve;
                                    dlg.reject = reject;
                                    dlg.showModal();
                                    }
                                )
                                .then(RorK => {
                                        window.location.assign(
                                            `/medley/${interlispOrXterm || "interlisp"}`
                                            + `?screen_width=${screenWidth}`
                                            + `&screen_height=${screenHeight}`
                                            + `&if=${RorK}`
                                            + `&resume=${resume || "false"}`
                                            + `&custom=${custom || "false"}`
                                            + `&notecards=${runNotecards || "false"}`
                                            + `&sftp=${startSftp || "false"}`
                                        );
                                    }
                                );
                            }
                            else {
                                window.location.assign(
                                    `/medley/${interlispOrXterm || "interlisp"}`
                                    + `?screen_width=${screenWidth}`
                                    + `&screen_height=${screenHeight}`
                                    + `&resume=${resume || "false"}`
                                    + `&custom=${custom || "false"}`
                                    + `&notecards=${runNotecards || "false"}`
                                    + `&sftp=${startSftp || "false"}`
                                    );
                            }
                        },
                        reason => {}
                );
        }
        function rdDone(RorK) {
            const dlg = document.getElementById("reconnect-dialog");
            dlg.close();
            setTimeout(() => dlg.resolve(RorK), 0);
        }

    script.
        function reset() {
            let req = new Request(`/medley/reset`);
            fetch(req)
                .then((response) => {
                        if (!response.ok) {
                            response.text().then(txt => showAlert(`Reset failed! status: ${response.status}  error: ${txt}`));
                        }
                        else showAlert(`Home directory reset succeeded.`);
                    }
                );
        }

    script.
        function showDevOptionsOnClick() {
           const dev_div = document.getElementById('dev-div-buttons');
           const dev_cb = document.getElementById("dev-options-checkbox");
           if(dev_cb.checked) {
                dev_div.style.display = "inline-block";
                localStore.setItem("show_dev_options", "true");
            }
            else {
                dev_div.style.display = "none";
                localStore.setItem("show_dev_options", "false");
           }
        }

    script.
        function devmodeOnClick() {
            const devmode = document.getElementById("devmode").checked ? "true" : "false";
            localStore.setItem("devmode", devmode);
        }

    script.
        function resumeOnClick() {
            const resume = document.getElementById("resume");
            const custom = document.getElementById("custom");
            const rnc = document.getElementById("run_notecards");
            if(resume.checked) {
                custom.checked = false;
                rnc.disabled = true;
            } else {
                rnc.disabled = false;
            }
        }

    script.
        function customOnClick() {
            const resume = document.getElementById("resume");
            const custom = document.getElementById("custom");
            const rnc = document.getElementById("run_notecards");
            if(custom.checked) {
                resume.checked = false;
                rnc.disabled = false;
            }
        }

    script.
        function notecardsOnClick() {
        }

    script.
        function showAlert (msg) {
            const dlg = document.getElementById("alert-dialog");
            const msgEl = document.getElementById("alert-span");
            msgEl.innerHTML = msg;
            dlg.showModal();
        }
        function alertOk() {
            const dlg = document.getElementById("alert-dialog");
            dlg.close();
        }

    script.
        function testReconnect (){
                        new Promise((resolve, reject) => {
                            const dlg = document.getElementById("reconnect-dialog");
                            dlg.resolve = resolve;
                            dlg.reject = reject;
                            dlg.showModal();
                            }
                        )
                        .then(RorK => {window.alert(RorK); });
        }

    script.
        function verificationClose (n, resend){
            const dlg = document.getElementById("verification-dialog" + n);
            if(resend) {
                fetch(`/user/resendverification`).then(response => {console.log(response);});
            }
            dlg.close();
        }

    script.
        function fillWindowOnClick() {
            let winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            let winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
            winWidth = Math.min(winWidth, 2048);
            winHeight = Math.min(winHeight, 2048);
            if(winHeight * winWidth > 0x1FFFFF) {
              const scale = Math.sqrt(0x1FFFFF / (winWidth * winHeight));
              winWidth = Math.round(scale * winWidth);
              winHeight = Math.round(scale * winHeight);
            }

            const widthElement = document.getElementById("screen-width");
            const heightElement = document.getElementById("screen-height");
            if(document.getElementById("fill-window-cb").checked) {
                widthElement.value = winWidth - 10;
                heightElement.value = winHeight - 10;
                widthElement.disabled = true;
                heightElement.disabled = true;
            } else {
                widthElement.value = localStore.getItem("screen_width") || 1024;
                heightElement.value = localStore.getItem("screen_height") || 808;
                widthElement.disabled = false;
                heightElement.disabled = false;
            }
        }

block content
    .row
        div(id="logged-in-as").text-center
            != 'Logged in as: ' + login

    .row
        .jumbotron.text-center
            button.main-button(type="button" onclick='startSession("interlisp");')!= "Start " + (isNCO ? "Notecards" : "Interlisp")
            div(id="screen-size-div" class="options-div")
                label.
                    <input type="checkbox" id="fill-window-cb" onclick="fillWindowOnClick()">&nbsp;Fill browser window
                label with Screen Width:
                    input(type="number", id="screen-width", class="number-input", value=1024)
                label and Screen Height:
                    input(type="number", id="screen-height", class="number-input", value=808)
            .run-options-div#run-options-div
                label.
                   <b>Run Options</b>
                div#resume-label
                    label.run-option.
                        <input type="checkbox" id="resume" onclick="resumeOnClick()" class="checkbox-input">&nbsp;Resume previous session
                    span.in-circle(onclick='helpOnClick("resume");') ?
                div#custom-label
                    label.run-option.
                        <input type="checkbox" id="custom" onclick="customOnClick()" class="checkbox-input">&nbsp;Run custom sysout
                    span.in-circle(onclick='helpOnClick("custom");') ?
                div#run_notecards-label-div
                    label.run-option#run_notecards-label
                        <input type="checkbox" id="run_notecards" onclick="notecardsOnClick()" class="checkbox-input">&nbsp;Run Notecards
                    span.in-circle(onclick='helpOnClick("run_notecards");') ?

    .row
        .jumbotron.text-center
            form(method="POST" action="/user/logout")
                button(type="submit" id="logout_submit").main-button Logout

    div(id="dev-div" style="display:none;")
        div(id="dev-div-checkbox")
            .jumbotron.text-center
                label.
                    <input type="checkbox" id="dev-options-checkbox" onclick="showDevOptionsOnClick();" class="checkbox-input">&nbsp;Show advanced options
        div(id="dev-div-buttons" style="display:none;")
            label.run-option.
                <input type="checkbox" id="sftp-checkbox" class="checkbox-input">&nbsp;Start SFTP Server
            br
            .jumbotron.text-center
                 button(type="button" onclick='startSession("xterm");').main-button Start Terminal Session
            br
            .jumbotron.text-center
                 button(type="button" onclick='reset();').main-button Reset Home Directory

    dialog(id="reconnect-dialog")
        p You already have an <span id="rd-type-span">Interlisp</span> session running.
        p Do you want to <b>reconnect</b> to this session or
        p <b>kill</b> this session and start a new one?
        br
        .button-div
            button(type="button" onclick='rdDone("reconnect");').main-button Reconnect
            button(type="button" onclick='rdDone("kill");').main-button Kill

    dialog(id="alert-dialog")
        p <span id="alert-span">Alert</span>
        br
        .single-button-div
            button(type="button" onclick='alertOk();').main-button OK

    dialog(id="verification-dialog1").vdialog
        h2  Notice
        p.
            This account has not been verified.  You are free to use online.interlisp.org to
            explore the many wonders of Interlisp.
        p.
            However, any account that has not been verified within 7 days of its creation
            may be deleted without notice.
        p.
            A verification email was sent to #{login} when the account was created.  Please follow the
            directions in this email to verify your account.
        .single-button-div
            button(type="button" onclick='verificationClose(1, false);').main-button OK
        .single-button-div
            button(type="button" onclick='verificationClose(1, true);').main-button Resend Verification Email

    dialog(id="verification-dialog2").vdialog
        h2  Notice
        p.
            As part of the re-registration process, we are asking you to verify your email address.
            You are free to continue to use online.interlisp.org to
            explore the many wonders of Interlisp.
        p.
            However, if your account email is not been verified within the next 7 days, it
            may be deleted without notice.
        p.
            A verification email was just sent to #{login}.  Please follow the
            directions in this email to verify your account.
        .single-button-div
            button(type="button" onclick='verification_close(2, false);').main-button OK

    script.
        function disclaimerCheckboxCallback() {
            fetch(`/user/nodisclaimer`).then(response => {console.log(response);});
        }

    include disclaimer.pug
    include help_dialogs.pug
