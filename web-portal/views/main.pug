//-
    /***************************************************************************
     *
     *   main.pug:   "main" page for online.interlisp.org web portal.
     *               This is where the user starts up interlisp, etc.,
     *
     *   2021-11-22 Frank Halasz
     *
     *
     *   Copyright: 2021-2022 by Interlisp.org
     *
     *
     **************************************************************************/
 
extends layout

block variables

block headeradds

    link(rel="stylesheet", href="/stylesheets/main.css")

    script.
        var localStore;
    
        window.addEventListener('resize', (event) => {
           fillWindowOnClick(); 
        });
    
        window.addEventListener('load', (event) => {
            localStore = window.localStorage;
            const urlParams = new URLSearchParams(window.location.search);
            const rr = urlParams.get('rr') || false;
            const fromvnc = urlParams.get('fromvnc') || false;
            
            if (targetSystem == "Notecards") {
                document.getElementById("fill_window_cb").checked = true;
                document.getElementById("dev-div").style.display = "none";
                if(#{isGuest}) {
                    hideRow("resume");
                    document.getElementById("do_not_checkbox_div").style.display = "none";

                } else {
                    showRow("resume");
                    document.getElementById("do_not_checkbox_div").style.display = "inline-block";
                }
                hideRow("run_notecards");
                hideRow("initial_exec");
                document.getElementById("run_notecards_cb").checked = true;
                document.getElementById("custom_sysout_cb").checked = false;
                document.getElementById("custom_init_cb").checked = false;
                document.getElementById("sftp_checkbox").checked = false;
                document.getElementById("interlisp_rb").checked = true;
            } else if(#{isGuest}) {
                document.getElementById("fill_window_cb").checked = true;
                document.getElementById("dev-div").style.display = "none";
                document.getElementById("do_not_checkbox_div").style.display = "none";
                hideRow("resume");
                showRow("initial_exec");
                showRow("run_notecards");
                document.getElementById("run_notecards_cb").checked = false;
                document.getElementById("sftp_checkbox").checked = false;
                document.getElementById("interlisp_rb").checked = true;
            } else {
                document.getElementById("resume_cb").checked = (localStore.getItem("resume") == "true");
                document.getElementById("custom_sysout_cb").checked = (localStore.getItem("custom") == "true");
                document.getElementById("custom_init_cb").checked = (localStore.getItem("custom_init") == "true");
                document.getElementById("sftp_checkbox").checked = (localStore.getItem("sftp") == "true");
                document.getElementById("run_notecards_cb").checked = (localStore.getItem("run_notecards") == "true");
                document.getElementById("fill_window_cb").checked = ((localStore.getItem("fill-window") || 'true') == 'true')
                document.getElementById("dev-div").style.display = "inline-block";
                document.getElementById("do_not_checkbox_div").style.display = "inline-block";
                showRow("resume");
                showRow("initial_exec");
                showRow("run_notecards");
                resumeOnClick();
                if (localStore.getItem("medley_exec") == "common")
                    document.getElementById("commonlisp_rb").checked = true;
                else
                    document.getElementById("interlisp_rb").checked = true;
            }
            fillWindowOnClick();
            document.getElementById("dev-options-checkbox").checked = (localStore.getItem("show_dev_options") == "true");
            showDevOptionsOnClick();
            if(! fromvnc) {
                if("#{isVerified}" != "true") {
                    const dlg = document.getElementById(rr ? "verification-dialog2" : "verification-dialog1");
                    dlg.showModal();
                }
                if("#{nodisclaimer}" != "true") {
                    const dlg = document.getElementById("disclaimer-dialog");
                    const cb = document.getElementById("do_not_checkbox");
                    cb.checked = false;
                    dlg.showModal();
                }
            }
        });

    script.
        function startSession (interlispOrXterm) {
            const screenWidth = document.getElementById("screen-width").value;
            const screenHeight = document.getElementById("screen-height").value;
            const fillWindow = document.getElementById("fill_window_cb").checked;
            const resume = document.getElementById("resume_cb").checked ? "true" : "false";
            const custom = document.getElementById("custom_sysout_cb").checked ? "true" : "false";
            const customInit = document.getElementById("custom_init_cb").checked ? "true" : "false";
            const runNotecards = document.getElementById("run_notecards_cb").checked ? "true": "false";
            const startSftp = document.getElementById("sftp_checkbox").checked ? "true": "false";
            const medleyExec = document.getElementById("interlisp_rb").checked ? "inter" : "common";
            if(! #{isGuest}) {
                localStore.setItem("fill-window", fillWindow ? 'true' : 'false');
                if(! fillWindow) {
                    localStore.setItem("screen_width", screenWidth);
                    localStore.setItem("screen_height", screenHeight);
                }
                localStore.setItem("resume", resume);
                localStore.setItem("custom", custom);
                localStore.setItem("custom_init", customInit);
                
            } else {
                if(targetSystem == "Notecards") {
                    
                } else {
                    localStore.setItem("sftp", startSftp);
                    localStore.setItem("run_notecards", runNotecards);
                    localStore.setItem("medley_exec", medleyExec);
                }
            }


            //  ToDo:  clean this up; use async await; have only single call to window.location.assign
            fetch(`/medley/checksession`)
                .then(  response => {
                            //console.log(response);
                            if (!response.ok) {
                                response.text().then(txt => { showAlert(`Start Interlisp failed! status: ${response.status}  error: ${txt}`); });
                                return Promise.reject("start interlisp fail");
                            } else {
                                return response.json();
                            }
                        }
                )
                .then(  data => {
                            const isRunning = data.isRunning;
                            const sessionType = data.target;
                            if(isRunning) {
                                new Promise((resolve, reject) => {
                                    const dlg = document.getElementById("reconnect-dialog");
                                    const typeEl = document.getElementById("rd-type-span");
                                    typeEl.html = sessionType;
                                    dlg.resolve = resolve;
                                    dlg.reject = reject;
                                    dlg.showModal();
                                    }
                                )
                                .then(RorK => {
                                        window.location.assign(
                                            `/medley/${interlispOrXterm || "interlisp"}`
                                            + `?screen_width=${screenWidth}`
                                            + `&screen_height=${screenHeight}`
                                            + `&if=${RorK}`
                                            + `&resume=${resume || "false"}`
                                            + `&custom=${custom || "false"}`
                                            + `&custom_init=${customInit || "false"}`
                                            + `&notecards=${runNotecards || "false"}`
                                            + `&sftp=${startSftp || "false"}`
                                            + `&exec=${medleyExec || "inter"}`
                                        );
                                    }
                                );
                            }
                            else {
                                window.location.assign(
                                    `/medley/${interlispOrXterm || "interlisp"}`
                                    + `?screen_width=${screenWidth}`
                                    + `&screen_height=${screenHeight}`
                                    + `&resume=${resume || "false"}`
                                    + `&custom=${custom || "false"}`
                                    + `&custom_init=${customInit || "false"}`
                                    + `&notecards=${runNotecards || "false"}`
                                    + `&sftp=${startSftp || "false"}`
                                    + `&exec=${medleyExec || "inter"}`
                                    );
                            }
                        },
                        reason => {}
                );
        }
        function rdDone(RorK) {
            const dlg = document.getElementById("reconnect-dialog");
            dlg.close();
            setTimeout(() => dlg.resolve(RorK), 0);
        }

    script.
        function reset() {
            let req = new Request(`/medley/reset`);
            fetch(req)
                .then((response) => {
                        if (!response.ok) {
                            response.text().then(txt => showAlert(`Reset failed! status: ${response.status}  error: ${txt}`));
                        }
                        else showAlert(`Home directory reset succeeded.`);
                    }
                );
        }

    script.
        function showDevOptionsOnClick() {
           const dev_div = document.getElementById('dev-div-controls');
           const dev_cb = document.getElementById("dev-options-checkbox");
           if(dev_cb.checked) {
                dev_div.style.display = "inline-block";
                localStore.setItem("show_dev_options", "true");
            }
            else {
                dev_div.style.display = "none";
                localStore.setItem("show_dev_options", "false");
           }
        }

    script.
        function devmodeOnClick() {
            const devmode = document.getElementById("devmode").checked ? "true" : "false";
            localStore.setItem("devmode", devmode);
        }

    script.
        function resumeOnClick() {
            const resume = document.getElementById("resume_cb");
            if(resume && resume.checked) {
                disableRow("custom_sysout");
                disableRow("custom_init");
                disableRow("run_notecards");
                disableRow("initial_exec");
                document.getElementById("interlisp_rb").disabled = true;
                document.getElementById("commonlisp_rb").disabled = true;
            } else {
                enableRow("custom_sysout");
                enableRow("custom_init");
                enableRow("run_notecards");
                enableRow("initial_exec");
                document.getElementById("interlisp_rb").disabled = false;
                document.getElementById("commonlisp_rb").disabled = false;
            }
        }

    script.
        function showAlert (msg) {
            const dlg = document.getElementById("alert-dialog");
            const msgEl = document.getElementById("alert-span");
            msgEl.innerHTML = msg;
            dlg.showModal();
        }
        function alertOk() {
            const dlg = document.getElementById("alert-dialog");
            dlg.close();
        }

    script.
        function testReconnect (){
                        new Promise((resolve, reject) => {
                            const dlg = document.getElementById("reconnect-dialog");
                            dlg.resolve = resolve;
                            dlg.reject = reject;
                            dlg.showModal();
                            }
                        )
                        .then(RorK => {window.alert(RorK); });
        }

    script.
        function verificationClose (n, resend){
            const dlg = document.getElementById("verification-dialog" + n);
            if(resend) {
                fetch(`/user/resendverification`).then(response => {console.log(response);});
            }
            dlg.close();
        }

    script.
        function fillWindowOnClick() {
            let winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            let winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
            winWidth = Math.min(winWidth, 2048);
            winHeight = Math.min(winHeight, 2048);
            if(winHeight * winWidth > 0x1FFFFF) {
              const scale = Math.sqrt(0x1FFFFF / (winWidth * winHeight));
              winWidth = Math.round(scale * winWidth);
              winHeight = Math.round(scale * winHeight);
            }

            const widthElement = document.getElementById("screen-width");
            const heightElement = document.getElementById("screen-height");
            if(document.getElementById("fill_window_cb").checked) {
                widthElement.value = winWidth;
                heightElement.value = winHeight;
                widthElement.disabled = true;
                heightElement.disabled = true;
            } else {
                widthElement.value = localStore.getItem("screen_width") || 1024;
                heightElement.value = localStore.getItem("screen_height") || 808;
                widthElement.disabled = false;
                heightElement.disabled = false;
            }
        }

    script.
        function hideRow(rowId) {
            document.getElementById(`${rowId}_row`).style.visibility = "collapse";
            document.getElementById(`${rowId}_rule`).style.visibility = "collapse";
         }

         function showRow(rowId) {
            document.getElementById(`${rowId}_row`).style.visibility = "visible";
            document.getElementById(`${rowId}_rule`).style.visibility = "visible";
         }

         function disableRow(rowId) {
            document.getElementById(`${rowId}_row`).style.color = "rgb(174, 174, 174)";
            const cb = document.getElementById(`${rowId}_cb`);
            if (cb) cb.disabled = true;
         }

         function enableRow(rowId) {
            document.getElementById(`${rowId}_row`).style.color = "rgb(0, 0, 0)";
            const cb = document.getElementById(`${rowId}_cb`);
            if (cb) cb.disabled = false;
         }

block content
    .row.text-center#logged-in-as
        form#dummy002(method="POST" action="/user/logout" style="display:none")
        != `Logged in as: ${login}.<a id="logout-a" onclick="document.getElementById('dummy002').submit();"><span id="logout-span">LOGOUT</span></a>` 

    .row.text-center#run-button
        button.main-button(type="button" onclick='startSession("interlisp");')!= "Run " + (isNCO ? "Notecards" : "Medley")
    
    .row.text-center#run-options
        table#ro-table
          thead
            tr
              th#ro-col1
              th#ro-col2
              th#ro-col3
          tbody
            //- Resume on click
            tr#resume_row
              td
              td
                label.run-option.
                  <input type="checkbox" id="resume_cb" onclick="resumeOnClick()" class="checkbox-input">&nbsp;Resume previous session
              td
                span.in-circle(onclick='helpOnClick("resume");') ?
            <tr id="resume_rule"><td></td><td><hr></td><td></td></tr>
            tr#initial_exec_row
              //- Initial Exec
              td
              td
                table
                  tr
                    td(rowspan="2").
                      Initial Exec:
                    td(style="text-align:left;")
                      label.
                        <input type="radio" id="interlisp_rb" name="which-exec" class="checkbox-input" checked>&nbsp;Interlisp
                  tr
                    td(style="text-align:left;")           
                      label.
                      <input type="radio" id="commonlisp_rb" name="which-exec" class="checkbox-input">&nbsp;Common Lisp
              td
                span.in-circle(onclick='helpOnClick("which-exec");') ?
            <tr id="initial_exec_rule"><td></td><td><hr></td><td></td></tr>
            tr#run_notecards_row
              //- Run Notecards
              td
              td              
                label.run-option.
                  <input type="checkbox" id="run_notecards_cb" class="checkbox-input">&nbsp;Run Notecards
              td
                span.in-circle(onclick='helpOnClick("run_notecards");') ?
            <tr id="run_notecards_rule"><td></td><td><hr></td><td></td></tr>
            tr
              //- Screen Width and Height
              td
              td#wh-cell              
                div
                  label Screen Width:&nbsp;
                    input(type="number", id="screen-width", class="number-input", value=1024, min=100, max=9999)
                div
                  label Screen Height:&nbsp;
                    input(type="number", id="screen-height", class="number-input", value=808, min=100, max=9999)
                #fill-window-label
                  label.
                    <input type="checkbox" id="fill_window_cb" onclick="fillWindowOnClick()">&nbsp;Fill browser window
              td
            <tr><td></td><td><hr></td><td></td></tr>

    .row#dev-div(style="display:none;")
      .text-center#dev-div-checkbox
        label.
          <input type="checkbox" id="dev-options-checkbox" onclick="showDevOptionsOnClick();" class="checkbox-input">&nbsp;Show advanced options
      #dev-div-controls(style="display:none;")
        #custom_sysout_row
          label.run-option.dev-div-run-option.
            <input type="checkbox" id="custom_sysout_cb" class="checkbox-input">&nbsp;Run custom sysout
          span.in-circle(onclick='helpOnClick("custom");') ?
        #custom_init_row
          label.run-option.dev-div-run-option.
            <input type="checkbox" id="custom_init_cb" class="checkbox-input">&nbsp;Use custom site init
          span.in-circle(onclick='helpOnClick("custom-init");') ?
        #sftp-label
          label.run-option.dev-div-run-option.
            <input type="checkbox" id="sftp_checkbox" class="checkbox-input">&nbsp;Start SFTP Server
          span.in-circle(onclick='helpOnClick("sftp");') ?
        #dev-div-buttons
          .text-center.dev-div-button
            button(type="button" onclick='startSession("xterm");').main-button Start Terminal Session
          .text-center.dev-div-button
            button(type="button" onclick='reset();').main-button Reset Home Directory

    dialog#reconnect-dialog
        p You already have an <span id="rd-type-span">Interlisp</span> session running.
        p Do you want to <b>reconnect</b> to this session or
        p <b>kill</b> this session and start a new one?
        br
        .button-div
            button(type="button" onclick='rdDone("reconnect");').main-button Reconnect
            button(type="button" onclick='rdDone("kill");').main-button Kill

    dialog#alert-dialog
        p <span id="alert-span">Alert</span>
        br
        .single-button-div
            button(type="button" onclick='alertOk();').main-button OK

    dialog.vdialog#verification-dialog1
        h2  Notice
        p.
            This account has not been verified.  You are free to use online.interlisp.org to
            explore the many wonders of Interlisp.
        p.
            However, any account that has not been verified within 7 days of its creation
            may be deleted without notice.
        p.
            A verification email was sent to #{login} when the account was created.  Please follow the
            directions in this email to verify your account.
        .single-button-div
            button(type="button" onclick='verificationClose(1, false);').main-button OK
        .single-button-div
            button(type="button" onclick='verificationClose(1, true);').main-button Resend Verification Email

    dialog.vdialog#verification-dialog2
        h2  Notice
        p.
            As part of the re-registration process, we are asking you to verify your email address.
            You are free to continue to use online.interlisp.org to
            explore the many wonders of Interlisp.
        p.
            However, if your account email is not been verified within the next 7 days, it
            may be deleted without notice.
        p.
            A verification email was just sent to #{login}.  Please follow the
            directions in this email to verify your account.
        .single-button-div
            button(type="button" onclick='verification_close(2, false);').main-button OK

    script.
        function disclaimerCheckboxCallback() {
            fetch(`/user/nodisclaimer`).then(response => {console.log(response);});
        }

    include disclaimer.pug
    include help_dialogs.pug
